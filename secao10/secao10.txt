Seção 10: Executando testes em paralelo


Paralelismo

É uma maneira de otimizar os testes a nível de execução.

Atualmente os testes estão sendo executados de um a forma serializada e ao final do último teste temos o tempo total gasto nos testes.

2ª opção: executar 2 testes ou mais de cada vez, tendo um tempo de execução menor.

Quanto mais processos em paralelo for possível executar, menor será o tempo de execução, mesmo que a duração de cada teste será diferente.



Configurando o Maven




Plugin do Maven.

https://adrianoaquino.wordpress.com/2009/11/02/configurando-maven-no-linux-ubuntu/

https://dicasdejava.com.br/como-instalar-o-maven-no-windows/


Execução em paralelo

http://maven.apache.org/surefire/maven-surefire-plugin/examples/fork-options-and-parallel-execution.html

http://maven.apache.org/surefire/maven-surefire-plugin/


 <build>
	 <testSourceDirectory>src</testSourceDirectory>
	 <plugins>
	 <plugin>
	 <groupId>org.apache.maven.plugins</groupId>
	 <artifactId>maven-surefire-plugin</artifactId>
	 <version>2.22.2</version>
	 <configuration>
	 <includes>
	 <include>br/ce/wcaquino/suites/*.java</include>
	 </includes>
	 <parallel>all</parallel>
	 <threadCount>2</threadCount>
	 </configuration>
	 </plugin>
	 </plugins>
 </build>

Um driver por thread

Resolvendo o erro do driver, usando a ThreadLocal.




Gerenciamento de massa de dados, parte 2

Mudando a estratégia de massa de dados.

Preparando o banco com todas as massas de dados necessárias, não dependendo de nenhum teste par executar outro.

Fazer um particionamento lógico dos dados, para que uma massa de dados não interfira na outra.



Easter Egg

Definir uma suíte de testes e as massas, e depois criar uma script que seja executado antes, limpando os dados e inserindo os dados necessários.

Botão escondido: reset, reseta o banco de dados, apagando movimentações e contas do usuário logado.






Adaptando os testes para a nova estratégia

Resetando a massa de dados

Reinicializando a massa de dados automaticamente ao fim dos testes.



Selenium GRID

https://www.selenium.dev/documentation/grid/

Selenium Grid é um processo onde uma máquina local pode conectar-se a ele, podendo conectar várias máquinas ao mesmo Grid, podendo distribuir os testes entre as várias máquinas conectadas a ele (nós).

Diretório GRID


Iniciando Server

java -jar selenium-server-standalone-3.141.59.jar -role hub


http://localhost:4444

http://172.17.0.1:4444/grid/console


Conectando Clientes

java -jar selenium-server-standalone-3.141.59.jar -role node

java -jar selenium-server-standalone-3.141.59.jar -role node -port 5556



Refatorando testes para usar o GRID

public static TipoExecucao TIPO_EXECUCAO = TipoExecucao.GRID;
	
	public enum Browsers {
		CHROME,
		FIREFOX
	}
	
	public enum TipoExecucao {
		LOCAL,
		GRID
	}

}


DriverFactory

if(Propriedades.TIPO_EXECUCAO == TipoExecucao.GRID) {
			DesiredCapabilities cap = null;
			switch (Propriedades.BROWSER) {
				case FIREFOX:
					cap = DesiredCapabilities.firefox();
				break;
				case CHROME:
					cap = DesiredCapabilities.chrome();
				break;
			}
			try {
				driver = new RemoteWebDriver(new URL("http://localhost:4444/wd/hub"), cap);
			} catch (MalformedURLException e) {
				System.err.println("Falha na conexão com o GRID");
				e.printStackTrace();
			}
		}


Preparando ambiente GRID: Windows

Máquina Remota
java -jar selenium-server-standalone-3.141.59.jar -role node -hub http://ipmaquinaremota:4444/grid/register


Preparando ambiente GRID: Linux

sudo nano /etc/profile

export PATH=$PATH:~/caminho/diretoriodosdrivers


Máquina Remota

java -jar selenium-server-standalone-3.141.59.jar -role node -hub http://ipmaquinaremota:4444/grid/register


Preparando ambiente GRID: OSX

Editar /etch/paths

/caminho/diretoriodosdrivers


java -jar selenium-server-standalone-3.141.59.jar -role node -hub http://ipmaquinaremota:4444/grid/register


Execução remota dos testes


